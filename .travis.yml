
notifications:
  email: false
  slack:
    rooms:
        - secure: "feqSVQ4KuF1zdEO3ZlVcolbbX/KJQ8e8YqOHr1k/noYMtxUvnorcpfxPUJIKJOws+CTOePL00BrXjr2rQjOrdY3fiJPqv/UwaQjyJYkBaP6vHZK7/bjnzJl3aVkZLEacy3DC2oh/d4LAVoFrStYBrfRIb7K6SlIcwtBsMzmn/j1rHcgLKl8H1fP5ceKsLc2fEd+ANfdAsz+7DmO0edCV5nhEbC1sDU+3RQ0eXkzY9UmSMIDPIjy/ViN3q30Qs82le//ypqQSMS7GxIrXEdOTmQt02GScsTD5ppbxPomv22CR88tDcaB6iLVXTfMpkNWLNiMzYyopUypbZv9dXaiz4BltfOHnohjJVGeeaEoOXlQKmperOuv77FGidOIX/RvBMVWWBgpUVxZompDPwOOo4RnSpkYgZzq+DJsAqI3YuhSqfUImcXXkS61cN5v/lyQF3YuOk3ns2S7FBKYK3rUpSOdGwRCIBX6VNkU4GdSLs20dXsMRg9//y3M7zGUuuiu6zHpARTUcqlh8dhuf9Bm4MXBs7M2FcEDksZg11HfDMOTC+1qQrJ6xnipSUrJLkaCy/GixE1q1dylAn+XrD+4Dm/iJgVK8wkugsW0so/c0dMnlqFI6Ke8fd2Yj0xZnI9pZ/lcFWJBBg2ZwGKku58vyx8Gh54iu+RF5UoG/f8D34vQ="
    on_success: change # default: always
    on_failure: always # default: always
    template:
      - "Repo `%{repository_slug}` *%{result}* build (<%{build_url}|#%{build_number}>) for commit (<%{compare_url}|%{commit}>) on branch `%{branch}`."
      - "Execution time: *%{duration}*"
      - "Message: %{message}"

language: go

go:
  - 1.12

branches:
  only:
  - master

env:
  global:
  - AWS_DEFAULT_REGION=us-west-2
  - AWS_S3_BUCKET=io.sliplab.lambdadeployment.uw2
  - LAMBDA_RUNTIME=go1.x
  - LAMBDA_ARN: "arn:aws:iam::191779904557:role/tf-lambda_basic_execution-role"
  - LAMBDA_HANDLER=main
  - access_key_id: "$AWS_ACCESS_KEY_ID"
  - secret_access_key: "$AWS_SECRET_ACCESS_KEY"
  - snyk_token: "$SNYK_TOKEN"

before_install:
  # execute all of the commands which need to be executed
  # before installing dependencies
  - pip install --user awscli
  - export PATH=$PATH:$HOME/.local/bin
  - curl -L -s https://github.com/golang/dep/releases/download/v0.5.1/dep-linux-amd64 -o $GOPATH/bin/dep
  - chmod +x $GOPATH/bin/dep
  - echo $TRAVIS_TAG


install:
  # install all of the dependencies you need here
  - $GOPATH/bin/dep init
  - $GOPATH/bin/dep ensure
  - go get golang.org/x/lint/golint
  - go get github.com/haya14busa/goverage
  - go get github.com/mattn/goveralls

before_script:
  # execute all of the commands which need to be executed
  # before running actual tests
  - PKGS=$(go list ./...)
  - LINT_PKGS=$(go list ./... | grep -Ev 'aws-lambda-go/lambda')
  - go get -t -d -v ./...
  # - echo $TRAVIS_TAG
  # - export TRAVIS_TAG=${git describe --tags $(git rev-list --tags --max-count=1)}
  # - echo $TRAVIS_TAG

after_success:
    - snyk monitor

# the following line is needed to enable the TravisCI build conditions
conditions: v1

stages:
  - name: install
    if: type != cron AND branch != integration AND tag =~ -install$
  - name: update
    if: type = cron OR branch = integration OR commit_message =~ run_tests
  - name: Deploy
    if: type != cron AND branch != integration
  - name: snyk
    if: branch = master AND type = push
  - name: publish
    if: branch = master AND type = push

jobs:
  include:
    - stage: format
      script: ./format.sh
    - stage: test
      script:
        - go get -t ./...
        - golint -set_exit_status
        - go vet .
        - go test .
        - go test ./... -race -coverprofile=coverage.txt -covermode=atomic
    - stage: snyk
      script:
        - npm install -g snyk
        - which snyk
        - snyk auth $snyk_token
        - snyk test
    - stage: push
      on:
        tags: true
      script:
        - export commitID=`git rev-parse HEAD`
        - GOOS=linux GOARCH=amd64 go build -o main lambda_golang_fibonacci.go
        - zip ${commitID}.zip main
        - aws s3 cp ${commitID}.zip s3://${AWS_S3_BUCKET}
    - stage: install
      on:
        condition: "$TRAVIS_TAG =~ -install$"
      script:
        #- export TAG=${TRAVIS_TAG}
        #- echo $TAG
        - export commitID=`git rev-parse HEAD`
        - export FUNCTION_NAME=${TRAVIS_REPO_SLUG#*/}
        - echo $FUNCTION_NAME
        - aws lambda create-function --region $AWS_DEFAULT_REGION --function-name $FUNCTION_NAME --runtime $LAMBDA_RUNTIME --role $LAMBDA_ARN --handler $LAMBDA_HANDLER --code S3Bucket=$AWS_S3_BUCKET,S3Key=$commitID.zip --memory-size 1024 --no-publish
    - stage: update
      on:
        condition:"$TRAVIS_TAG =~ -update$"
      script:
          #- export TAG=${TRAVIS_TAG}
          #- echo $TAG
        - export commitID=`git rev-parse HEAD`
        - export FUNCTION_NAME=${TRAVIS_REPO_SLUG#*/}
        - echo $FUNCTION_NAME
        - aws lambda update-function-code --function-name $FUNCTION_NAME --s3-bucket $AWS_S3_BUCKET --s3-key $commitID.zip --region $AWS_DEFAULT_REGION --no-publish
    - stage: publish
      on:
        condition: "$TRAVIS_TAG =~ -publish$"
      script:
        #- export TAG=${TRAVIS_TAG}
        #- echo $TAG
        - export FUNCTION_NAME=${TRAVIS_REPO_SLUG#*/}
        - echo $FUNCTION_NAME
        - aws lambda publish-version --function-name $FUNCTION_NAME --region $AWS_DEFAULT_REGION
